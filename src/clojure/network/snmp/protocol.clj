(ns clojure.network.snmp.protocol
  (:require
    [clojure.set :refer (map-invert)])
  (:import
    [java.util Date]
    [java.lang Exception]))

;; Arhitecture is based on RFC 3412
;; http://www.ietf.org/rfc/rfc3412.txt?number=3412

(defprotocol SNMPCoderProtocol
  (snmp-encode [this message] "Returns encoded message as byte-array that is ready to be sent to host(s).")
  (snmp-decode [this message] "Returns decoded message as byte-array that is ready to be sent to host(s)."))

(defprotocol SNMPSocketLineProtocol
  (connect [this host] [this host port] "Opens Socket towards specific host port")
  (disconnect [this] "Returns true if opened socket was disconnected")
  (closed? [this] "Returns true if line closed?")
  (close [this] "Returns true if line is closed")
  (get-host [this] "Returns host to whom line is opened to")
  (get-port [this] "Returns port of target host")
  (send-over-line [this message] "Sends message to remote hosts and returns VariableBindings"))

(defprotocol RIDStoreProtocol
  (create-rid [this] [this data] "Function returns request ID. It should store RID, so that it can be verified. Data is optional context for rid creation.")
  (verify-rid [this rid] [this rid data] "Function returns true if RID is verified. Also if RID is verified. Data is optional for context of received rid.")
  (pending-rids [this] "Returns pending RIDs."))

(defprotocol SNMPLineQueryProtocol
  (query-oids [this oids] "Used for sending OIDs to remote host. Return result are variable bindings."))

(defrecord SNMPv1Message [community pdu])
(defrecord SNMPv2cMessage [community pdu])
(defrecord SNMPv3Message [message-identifier
                          maximum-message-size
                          message-flags
                          message-security-model
                          message-security-parameters
                          context-engine-id
                          context-name
                          pdu])

(defprotocol SNMPCompositionProtocol
  (snmp-compose-message [this data] "Returns composed message ready for snmp-encoding")
  (snmp-decompose-message [this data] "Returns decomposed message from encoded data"))

(defrecord VariableBinding [oid value]
  Object
  (toString [this] (str (clojure.string/join "." oid) "=" value)))

(defmethod print-method VariableBinding [v ^java.io.Writer w]
  (.write w (str v)))




;;  A number used to match requests with replies.
;;  It is generated by the device that sends a request
;;  and copied into this field in a Response-PDU by
;;  the responding SNMP entity.

;; Error codeas:
;;  An integer value that is used in a Response-PDU
;;  to tell the requesting SNMP entity the result of its request.
;;  A value of zero indicates that no error occurred.
;;  Other values indicate what sort of error happened.
(def error-codes {:noError 0
                  :tooBig 1
                  :noSuchName 2
                  :badValue 3
                  :readOnly 4
                  :genErr 5
                  :noAccess 6
                  :wrongType 7
                  :wrongLength 8
                  :wrongEncoding 9
                  :wrongValue 10
                  :noCreation 11
                  :inconsistentValue 12
                  :resourceUnavailable 13
                  :commitFailed 14
                  :undoFailed 15
                  :authorizationError 16
                  :notWritable 17
                  :inconsistentName 18})

(def error-type (map-invert error-codes))


;; PDU

(defn get-request-pdu
  [rid variable-bindings options]
  "Available options are :error-type and :error-number.
  oids argument should be vector of OID values."
  {:type :get-request
   :value [{:type :Integer :value rid}
           {:type :Integer :value (or (:error-type options) 0)}
           {:type :Integer :value (or (:error-number options) 0)}
           {:type :sequence :value variable-bindings}]})

(defn get-next-request-pdu
  [rid variable-bindings options]
  "Available options are :error-type and :error-index.
  oids argument should be vector of OID values."
  {:type :get-next-request
   :value [{:type :Integer :value rid}
           {:type :Integer :value (or (:error-type options) 0)}
           {:type :Integer :value (or (:error-index options) 0)}
           {:type :sequence :value variable-bindings}]})

(defn get-bulk-pdu
  [rid variable-bindings options]
  "Available options are :non-repetitors and :max-repetitions.
  oids argument should be vector of OID values."
  {:type :get-bulk-request
   :value [{:type :Integer :value rid}
           {:type :Integer :value (or (:non-repetitors options) 0)}
           {:type :Integer :value (or (:max-repetitions options) 300)}
           {:type :sequence :value variable-bindings}]})

(defmulti make-snmp-pdu (fn [type rid variable-bindings options] type))

(defmethod make-snmp-pdu :default [type & _]
  (throw (Exception. "Unknown SNMP PDU type: " type)))

(defmethod make-snmp-pdu :get-request [_ rid variable-bindings options]
  (get-request-pdu rid variable-bindings options))

(defmethod make-snmp-pdu :get-next-request [_ rid variable-bindings options]
  (get-next-request-pdu rid variable-bindings options))

(defmethod make-snmp-pdu :get-bulk-request [_ rid variable-bindings options]
  (get-bulk-pdu rid variable-bindings options))

(load "protocol/utils")
(load "protocol/message_processing")

(defmulti make-snmp-composer (fn [{:keys [version]}] version))

(defmethod make-snmp-composer :default [_]
  (throw (Exception. "Unsoported version.")))

(defmethod make-snmp-composer :v1 [{:keys [community] :as options}]
  (assert community "Community not specified")
  (reify
    SNMPCompositionProtocol
    (snmp-compose-message [_ pdu]
      (assert (#{:get-request :get-next-request :response} (:type pdu))
              (str "PDU type " (:type pdu) " is not supported in SNMPv1"))
      {:type :sequence
       :value [{:type :Integer :value 0}
               {:type :OctetString :value community}
               pdu]})
    (snmp-decompose-message [_ snmp-packet-tree]
      (-> snmp-packet-tree :value (nth 2)))))

(defmethod make-snmp-composer :v2c [{:keys [community] :as options}]
  (assert ((comp not nil?) (:community options)) "Community not specified")
  (reify
    SNMPCompositionProtocol
    (snmp-compose-message [_ pdu]
      (assert (#{:get-request :get-next-request :get-bulk-request :response} (:type pdu))
              (str "PDU type " (:type pdu) " is not supported in SNMPv2c"))
      {:type :sequence
       :value [{:type :Integer :value 1}
               {:type :OctetString :value community}
               pdu]})
    (snmp-decompose-message [_ snmp-packet-tree]
      (-> snmp-packet-tree :value (nth 2)))))
